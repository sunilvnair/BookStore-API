@page "/authors/create/"
@attribute [Authorize]
@inject IAuthorRepository _repo
@inject NavigationManager _navMan


<PageTitle Title="Add Author Details" />
@if (isFaild)
{

    <ErrorMsg Message="Something went wrong with operation" />

}


<EditForm Model="authModel" OnValidSubmit="CreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First Name</label>
        <InputText class="form-control" id="firstname" @bind-Value="authModel.Firstname" />
        <ValidationMessage For="@(() => authModel.Firstname)" />
    </div>
    <div class="form-group">
        <label for="lastname">Last Name</label>
        <InputText class="form-control" id="lastname" @bind-Value="authModel.Lastname" />
        <ValidationMessage For="@(() => authModel.Lastname)" />
    </div>
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputTextArea class="form-control" id="bio" @bind-Value="authModel.Bio" />
        <ValidationMessage For="@(() => authModel.Bio)" />
    </div>
    <button class="btn btn-primary" type="submit">
        <span class="glyphicon glyphicon-floppy-disk"></span>Save Changes
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span> Back to list
    </button>

</EditForm>


@code {

    private Author authModel = new Author();
    private bool isFaild = false;



    private void BackToList()
    {
        _navMan.NavigateTo("/authors/");
    }

    private async Task CreateAuthor()
    {

        bool isSuccess = await _repo.Create(Endpoints.AuthorsEndpoint, authModel);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFaild = true;
        }

    }
}
