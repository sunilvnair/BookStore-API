@page "/books/create/"
@attribute [Authorize]
@inject IBookRepository _repo
@inject IAuthorRepository _AuthRepo
@inject NavigationManager _navMan
@inject iFileUpload _uploadFile
@inject IToastService _toastService

<PageTitle Title="Add Book Details" />
@if (isFaild)
{
    <ErrorMsg Message="Something went wrong with operation" />
}

<EditForm Model="bookModel" OnValidSubmit="CreateBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Title">Title</label>
        <InputText class="form-control" id="Title" @bind-Value="bookModel.Title" />
        <ValidationMessage For="@(() => bookModel.Title)" />
    </div>
    <div class="form-group">
        <label for="Year">Year</label>
        <InputNumber class="form-control" id="Year" @bind-Value="bookModel.Year" />
        <ValidationMessage For="@(() => bookModel.Year)" />
    </div>
    <div class="form-group">
        <label for="ISBN">ISBN</label>
        <InputText class="form-control" id="ISBN" @bind-Value="bookModel.ISBN" />
        <ValidationMessage For="@(() => bookModel.ISBN)" />
    </div>
    <div class="form-group">
        <label for="Price">Price</label>
        <InputNumber class="form-control" id="Price" @bind-Value="bookModel.Price" />
        <ValidationMessage For="@(() => bookModel.Price)" />
    </div>
    <div class="form-group">
        <label for="authors">Author</label>
        <select class="form-control" id="authors" @bind="bookModel.AuthorId">
            <option value="">-- Select Author --</option>
            @if (Authors != null)
            {
                @foreach (var author in Authors)
                {
                    <option value="@author.Id"> @author.Firstname @author.Lastname</option>
                }
            }

        </select>

    </div>
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputTextArea @bind-Value="bookModel.Summary" class="form-control" id="summary" />
    </div>
    <div class="form-group">
        <label for="bookCover">Book Cover</label>
        <InputFile OnChange="DoFileSelection" />
        @if (isInValidFileType)
        {
            <ErrorMsg Message="=" Only image type of jpeg,png,jpg are alloweded />
        }
        @if (!string.IsNullOrWhiteSpace(imageDataURL))
        {
            <img src="@imageDataURL" style="height:100px;width:100px" />
        }

    </div>

    <button class="btn btn-primary" type="submit">
        <span class="glyphicon glyphicon-floppy-disk"></span>Save Changes
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary">
        <span class="oi oi-media-skip-backward"></span> Back to list
    </button>

</EditForm>


@code {

    private Book bookModel = new Book();
    private bool isFaild = false;
    private IList<Author> Authors;
    private IFileListEntry file;

    private bool isInValidFileType = false;
    private string imageDataURL;
    private MemoryStream ms;


    private async Task DoFileSelection(IFileListEntry[] files)
    {

        file = files.FirstOrDefault();
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInValidFileType = false;
            }
            else
            {
                isInValidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInValidFileType = false;
        }
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/books/");
    }

    protected async override Task OnInitializedAsync()
    {
        Authors = await _AuthRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task CreateBook()
    {
        if (!isInValidFileType)
        {
            if (file != null)
            {
                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _uploadFile.UploadFile(file, ms, picName);

                bookModel.Image = picName;
            }

            bool isSuccess = await _repo.Create(Endpoints.BooksEndpoint, bookModel);
            if (isSuccess)
            {
                _toastService.ShowSuccess("Book data created successfully .","");
                BackToList();
            }
            else
            {
                isFaild = true;
                _uploadFile.RemoveFile(bookModel.Image);

            }
        }


    }
}
