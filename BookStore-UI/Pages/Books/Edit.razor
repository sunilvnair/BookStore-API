@page "/books/edit/{id}"
@attribute [Authorize]
@inject IBookRepository _repo
@inject IAuthorRepository _authRepo
@inject NavigationManager _navMan
@inject iFileUpload _uploadFile


<PageTitle Title="Edit Book Details" />
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMsg Message="Invalid Selection. Please Try Again" />
}
else if (bookModel == null)
{
    <LoadingMessage Message="Loading Book Details" />
}
else if (isFaild)
{
    <ErrorMsg Message="Something went wrong with operation" />
}
else
{
    <EditForm Model="bookModel" OnValidSubmit="UpdateBook">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Title">Title</label>
            <InputText class="form-control" id="Title" @bind-Value="bookModel.Title" />
            <ValidationMessage For="@(() => bookModel.Title)" />
        </div>
        <div class="form-group">
            <label for="Year">Year</label>
            <InputNumber class="form-control" id="Year" @bind-Value="bookModel.Year" />
            <ValidationMessage For="@(() => bookModel.Year)" />
        </div>
        <div class="form-group">
            <label for="ISBN">ISBN</label>
            <InputText class="form-control" id="ISBN" @bind-Value="bookModel.ISBN" />
            <ValidationMessage For="@(() => bookModel.ISBN)" />
        </div>
        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber class="form-control" id="Price" @bind-Value="bookModel.Price" />
            <ValidationMessage For="@(() => bookModel.Price)" />
        </div>
        <div class="form-group">
            <label for="authors">Author</label>
            <select class="form-control" id="authors" @bind="bookModel.AuthorId">
                @if (Authors != null)
                {
                    @foreach (var author in Authors)
                    {
                        <option value="@author.Id"> @author.Firstname @author.Lastname</option>
                    }
                }

            </select>

        </div>

        <div class="form-group">
            <label for="bookCover">Book Cover</label>
            <InputFile OnChange="DoFileSelection" />
            @if (isInValidFileType)
            {
                <ErrorMsg Message="=" Only image type of jpeg,png,jpg are alloweded />
            }
            @if (!string.IsNullOrWhiteSpace(imageDataURL))
            {
                <img src="@imageDataURL" style="height:100px;width:100px" />
            }
            else if (!string.IsNullOrWhiteSpace(bookModel.Image))
            {
                <img src="/uploads/@bookModel.Image" style="height:100px;width:100px" />
            }

        </div>

        <button class="btn btn-primary" type="submit">
            <span class="glyphicon glyphicon-floppy-disk"></span>Save Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span> Back to list
        </button>

    </EditForm>
}



@code {

    [Parameter]
    public string Id { get; set; }

    private Book bookModel = new Book();

    private IList<Author> Authors;
    private IFileListEntry file;

    private bool isSuccess = true;
    private bool isFaild = false;
    private bool isFileChanged = false;
    private bool isInValidFileType = false;
    private string imageDataURL;

    private MemoryStream ms;


    private async Task DoFileSelection(IFileListEntry[] files)
    {

        file = files.FirstOrDefault();
        isFileChanged = true;
        if (file != null)
        {
            var name = file.Name;
            if (name.Contains("jpg") || name.Contains("png") || name.Contains("jpeg"))
            {
                ms = new MemoryStream();
                await file.Data.CopyToAsync(ms);

                var reader = new StreamReader(file.Data);
                var imageBase64Data = Convert.ToBase64String(ms.ToArray());
                imageDataURL = string.Format("data:image/png;base64,{0}", imageBase64Data);
                isInValidFileType = false;
            }
            else
            {
                isInValidFileType = true;
                imageDataURL = string.Empty;
            }
        }
        else
        {
            isInValidFileType = false;
        }
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/books/");
    }

    protected async override Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        bookModel = await _repo.Get(Endpoints.BooksEndpoint, id);

        Authors = await _authRepo.Get(Endpoints.AuthorsEndpoint);
    }

    private async Task UpdateBook()
    {
        if (!isInValidFileType)
        {
            if (file != null)
            {

                var ext = Path.GetExtension(file.Name);
                var picId = Guid.NewGuid().ToString().Replace("-", "");
                var picName = $"{picId}{ext}";

                _uploadFile.RemoveFile(bookModel.Image);
                _uploadFile.UploadFile(file, ms, picName);

                bookModel.Image = picName;
            }
            else if (isFileChanged && file == null)
            {
                _uploadFile.RemoveFile(bookModel.Image);
                bookModel.Image = string.Empty;
            }

             isSuccess = await _repo.Update(Endpoints.BooksEndpoint, bookModel, bookModel.Id);
            if (isSuccess)
            {
                BackToList();
            }
            else
            {
                isFaild = true;
            }
        }


    }
}
