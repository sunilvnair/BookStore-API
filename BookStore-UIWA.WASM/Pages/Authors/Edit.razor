@page "/authors/edit/{id}"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo
@inject NavigationManager _navMan
@inject IToastService _toastService

<PageTitle Title="Edit Author Details" />

@if (isFaild)
{

    <ErrorMsg Message="Something went wrong with edit author" />

}

@if (authModel == null)
{
    <LoadingMessage Message="Loading Author's data ...." />
}
else
{
    <EditForm Model="authModel" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText class="form-control" id="firstname" @bind-Value="authModel.Firstname" />
            <ValidationMessage For="@(() => authModel.Firstname)" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText class="form-control" id="lastname" @bind-Value="authModel.Lastname" />
            <ValidationMessage For="@(() => authModel.Lastname)" />
        </div>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputTextArea class="form-control" id="bio" @bind-Value="authModel.Bio" />
            <ValidationMessage For="@(() => authModel.Bio)" />
        </div>
        <button class="btn btn-primary" type="submit">
            <span class="glyphicon glyphicon-floppy-disk"></span>Save Changes
        </button>
        <button @onclick="BackToList" class="btn btn-outline-secondary">
            <span class="oi oi-media-skip-backward"></span> Back to list
        </button>

    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private Author authModel = new Author();
    private bool isFaild = false;


    protected async override Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        authModel = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navMan.NavigateTo("/authors/");
    }

    private async Task EditAuthor()
    {

        bool isSuccess = await _repo.Update(Endpoints.AuthorsEndpoint, authModel, authModel.Id);
        if (isSuccess)
        {
            _toastService.ShowInfo("Author data modified Successfully.", "");
            BackToList();
        }
        else
        {
            _toastService.ShowError("Error while modifying Author details.", "");
            isFaild = true;
        }

    }
}
